syntax = "proto3";

package api.v1.database;

import "api/v1/database/database.proto";
import "model/common.proto";

// The service to manage databases.
service Service {
  rpc CreateCredential(CreateCredentialRequest)
      returns (CreateCredentialResponse) {}
  rpc DeleteCredential(DeleteCredentialRequest)
      returns (DeleteCredentialResponse) {}

  rpc Create(CreateRequest) returns (CreateResponse) {}
  rpc Get(GetRequest) returns (GetResponse) {}
  rpc Update(UpdateRequest) returns (UpdateResponse) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  rpc GetByName(GetByNameRequest) returns (GetByNameResponse) {}

  rpc List(ListRequest) returns (ListResponse) {}

  rpc GetEndpoint(GetEndpointRequest) returns (GetEndpointResponse) {}

  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse) {}
  rpc DeleteTable(DeleteTableRequest) returns (DeleteTableResponse) {}
  rpc ListTables(ListTablesRequest) returns (ListTablesResponse) {}
}

message GetByNameRequest {
  string name = 1;
}

message GetByNameResponse {
  database.Database database = 2;
}

message CreateCredentialRequest {
  string name = 1;
  string database_id = 2;
}

message CreateCredentialResponse {
  string client_id = 1;
  string client_secret = 2;
}

message DeleteCredentialRequest {
  string database_id = 1;
  string credential_name = 2;
}

message DeleteCredentialResponse {}

message CreateRequest {
  repeated database.Update initializers = 1;
  database.Type type = 2;
}

message CreateResponse {
  database.Database database = 1;
  string client_id = 2;
  string client_secret = 3;
}

message GetRequest {
  string database_id = 1;
}

message GetResponse {
  database.Database database = 1;
}

message UpdateRequest {
  string database_id = 1;
  repeated database.Update updates = 2;
}

message UpdateResponse {
  database.Database database = 1;
}

message DeleteRequest {
  string database_id = 1;
}

message DeleteResponse {}

message ListRequest {
  model.Pagination pagination = 1;
}

message ListResponse {
  repeated database.Database databases = 1;
  uint64 total = 2;
}

message GetEndpointRequest {
  string database_id = 1;
  string client_id = 2;
  string client_secret = 3;
}

message GetEndpointResponse {
  string endpoint = 1;
  string database_name = 2;
}

message CreateTableRequest {
  string database_id = 1;
  string table_name = 2;
}

message CreateTableResponse {}

message DeleteTableRequest {
  string database_id = 1;
  string table_name = 2;
}

message DeleteTableResponse {}

message ListTablesRequest {
  model.Pagination pagination = 2;
  string database_id = 1;
}

message ListTablesResponse {
  repeated database.Table tables = 1;
  uint64 total = 2;
}
